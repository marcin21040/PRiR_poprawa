%%sh
cat > pi-mpi.c << EOF

#include <stdio.h>
#include <mpi.h>

#define N 100
#define ile_procesow 10
#define ile_na_proces 10

int main(int argc, char** argv) {
  int licznik;
  int procesy;
  int suma_globalna;
  int suma_liczn;
  float srednia;
  float srednia_liczn;
  
  MPI_Init(NULL, NULL);
  MPI_Comm_size(MPI_COMM_WORLD, &procesy);
  MPI_Comm_rank(MPI_COMM_WORLD, &licznik);
  
  int start = licznik * ile_na_proces + 1;
  int end = start + ile_na_proces - 1;
  
  suma_liczn = 0;
  for (int i = start; i <= end; i++) {
    suma_liczn += i;
  }
  
  srednia_liczn = (float)suma_liczn / ile_na_proces;
  
  MPI_Reduce(&suma_liczn, &suma_globalna, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
  MPI_Reduce(&srednia_liczn, &srednia, 1, MPI_FLOAT, MPI_SUM, 0, MPI_COMM_WORLD);
  
  if (licznik == 0) {
    srednia = srednia / procesy;
    printf("Suma liczb  wynosi: %d\n", suma_globalna);
    printf("Åšrednia liczb  wynosi: %f\n", srednia);
  }
  
  MPI_Finalize();
  return 0;
}
EOF
mpicc pi-mpi.c && mpirun -n 1 --allow-run-as-root a.out
